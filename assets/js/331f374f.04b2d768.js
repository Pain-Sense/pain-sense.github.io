"use strict";(self.webpackChunkpain_sense=self.webpackChunkpain_sense||[]).push([[884],{3758:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var t=i(4848),s=i(8453);const r={},a="FrontEnd",o={id:"Development/FrontEnd",title:"FrontEnd",description:"Start Experiment Page",source:"@site/docs/Development/FrontEnd.md",sourceDirName:"Development",slug:"/Development/FrontEnd",permalink:"/docs/Development/FrontEnd",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"projectSidebar",previous:{title:"ESP32",permalink:"/docs/Development/ESP32"},next:{title:"Processing",permalink:"/docs/Development/Processing"}},l={},d=[{value:"Start Experiment Page",id:"start-experiment-page",level:2},{value:"Real-Time Monitoring",id:"real-time-monitoring",level:2},{value:"Experiment Information",id:"experiment-information",level:3},{value:"Real-Time Data Visualization",id:"real-time-data-visualization",level:3},{value:"Device Status Monitoring",id:"device-status-monitoring",level:2},{value:"Disconnection Notifications",id:"disconnection-notifications",level:3},{value:"History and Post-Experiment Analysis",id:"history-and-post-experiment-analysis",level:2},{value:"History Visualization",id:"history-visualization",level:3},{value:"Feature Extraction",id:"feature-extraction",level:3},{value:"Grafana Integration",id:"grafana-integration",level:3},{value:"Experiment Listing",id:"experiment-listing",level:2}];function c(e){const n={br:"br",h1:"h1",h2:"h2",h3:"h3",hr:"hr",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"frontend",children:"FrontEnd"}),"\n",(0,t.jsx)(n.h2,{id:"start-experiment-page",children:"Start Experiment Page"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.strong,{children:"Start Experiment"})," page allows the configuration and initialization of new experiments through a structured form. The user flow consists of the following steps:"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Patient Selection"}),(0,t.jsx)(n.br,{}),"\n","The user must select a patient previously registered in the system. This step is mandatory to associate the experiment with a specific subject."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Experiment Information"}),(0,t.jsx)(n.br,{}),"\n","After selecting the patient, the user must:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Define a ",(0,t.jsx)(n.strong,{children:"name for the experiment"})," (required field)."]}),"\n",(0,t.jsxs)(n.li,{children:["Add ",(0,t.jsx)(n.strong,{children:"additional notes"})," (optional field), useful for observations, context, or specific parameters."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Device Selection and Validation"}),(0,t.jsx)(n.br,{}),"\n","The user chooses a device from the available list. Devices can be in one of two states:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Online:"})," the device is connected to the network and properly integrated with the system, ready for use."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Offline:"})," the device is disconnected or unavailable.",(0,t.jsx)(n.br,{}),"\n","Before starting the experiment, the system performs a connection test with the selected device. Only online devices can be used."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Start Experiment"}),(0,t.jsx)(n.br,{}),"\n","Once a patient is selected, the experiment name is set, and an online device is validated, the ",(0,t.jsx)(n.strong,{children:"Start Experiment"})," button becomes active, allowing data collection to begin."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)("img",{src:"/img/FrontEnd1.png",alt:"Start Experiment Page Screenshot"}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"real-time-monitoring",children:"Real-Time Monitoring"}),"\n",(0,t.jsxs)(n.p,{children:["After creating an experiment, the user is automatically redirected to the ",(0,t.jsx)(n.strong,{children:"Real-Time Monitoring"})," page. This page continuously and dynamically displays data sent by the selected device during the experiment."]}),"\n",(0,t.jsx)(n.h3,{id:"experiment-information",children:"Experiment Information"}),"\n",(0,t.jsx)(n.p,{children:"At the top of the page, key details of the experiment are shown, including:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Experiment name"}),"\n",(0,t.jsx)(n.li,{children:"Associated patient"}),"\n",(0,t.jsx)(n.li,{children:"Additional notes (if provided)"}),"\n",(0,t.jsx)(n.li,{children:"Device ID"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"real-time-data-visualization",children:"Real-Time Data Visualization"}),"\n",(0,t.jsx)(n.p,{children:"Data captured by the device is shown using real-time updating graphs. The process works as follows:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Dynamic Backend Query"}),(0,t.jsx)(n.br,{}),"\n","The frontend sends an HTTP request to the backend to identify the types of data being sent (e.g., ECG, GSR, BVP)."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Dynamic Graph Construction"}),(0,t.jsx)(n.br,{}),"\n","Based on the response, the frontend dynamically inserts the appropriate graphs into the React dashboard."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Grafana Integration"}),(0,t.jsx)(n.br,{}),"\n","Graphs are generated by Grafana, which consumes real-time data stored in InfluxDB. The frontend embeds these graphs via dynamically configured iframes."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"This flow ensures the monitoring dashboard adapts automatically to the device\u2019s capabilities, providing accurate and efficient real-time visualization of biometric signals."}),"\n",(0,t.jsx)("img",{src:"/img/FrontEnd2.png",alt:"Real-Time Monitoring Dashboard"}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"device-status-monitoring",children:"Device Status Monitoring"}),"\n",(0,t.jsx)(n.p,{children:"During the experiment, the device\u2019s connectivity is constantly monitored to ensure data collection integrity."}),"\n",(0,t.jsx)(n.p,{children:"A polling mechanism in the frontend sends periodic requests to the backend to check if the device is still online. This continuous check allows near real-time detection of connection loss."}),"\n",(0,t.jsx)(n.h3,{id:"disconnection-notifications",children:"Disconnection Notifications"}),"\n",(0,t.jsx)(n.p,{children:"If the device goes offline during the experiment:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"The system automatically detects the disconnection through polling."}),"\n",(0,t.jsx)(n.li,{children:"A notification alerts the user on the interface about the disconnection."}),"\n",(0,t.jsx)(n.li,{children:"This enables the operator to quickly respond by reconnecting, stopping, or restarting the experiment."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"This mechanism is essential to ensure data reliability and the safety of real-time monitoring."}),"\n",(0,t.jsx)("img",{src:"/img/FrontEndDeviceOffline.png",alt:"Device Offline Notification"}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"history-and-post-experiment-analysis",children:"History and Post-Experiment Analysis"}),"\n",(0,t.jsx)(n.p,{children:"After the experiment ends, the system allows access to detailed historical data for analysis, interpretation, and support of clinical or scientific decisions."}),"\n",(0,t.jsx)(n.h3,{id:"history-visualization",children:"History Visualization"}),"\n",(0,t.jsx)(n.p,{children:"Users can view:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Basic experiment info (patient, name, notes, device)"}),"\n",(0,t.jsx)(n.li,{children:"Historical graphs with raw data sent by the device during the experiment, stored in InfluxDB"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"feature-extraction",children:"Feature Extraction"}),"\n",(0,t.jsx)(n.p,{children:"In addition to raw data, new graphs are shown based on feature extraction done by the backend, using key signals like:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"ECG:"})," average heart rate, variability"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"GSR:"})," average skin conductance, peak events"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"BVP:"})," average pulse, amplitude"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"These derived graphs are dynamically rendered and help highlight important patterns and metrics in an aggregated way."}),"\n",(0,t.jsx)(n.h3,{id:"grafana-integration",children:"Grafana Integration"}),"\n",(0,t.jsx)(n.p,{children:"Similar to live viewing, historical and feature-extracted graphs are shown through dynamic Grafana dashboards integrated into the React frontend via iframes, automatically configured for the selected experiment."}),"\n",(0,t.jsx)("img",{src:"/img/FrontEnd3.png",alt:"Historical Data Dashboard"}),"\n",(0,t.jsx)("img",{src:"/img/FrontEnd4.png",alt:"Feature Extraction Dashboard"}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"experiment-listing",children:"Experiment Listing"}),"\n",(0,t.jsx)(n.p,{children:"The system also provides a dedicated page listing all recorded experiments. This feature offers an overview and makes it easy to access past experiments for review or analysis."}),"\n",(0,t.jsx)("img",{src:"/img/FrontEnd5.png",alt:"Experiment Listing Page"})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>o});var t=i(6540);const s={},r=t.createContext(s);function a(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);